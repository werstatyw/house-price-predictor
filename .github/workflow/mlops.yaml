name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  FASTAPI_IMAGE_NAME: ghcr.io/werstatyw/fastapi
  STREAMLIT_IMAGE_NAME: ghcr.io/werstatyw/streamlit

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov

      - name: Run tests
        run: |
          pytest tests/ --cov=. --cov-report=xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata for FastAPI
        id: meta-fastapi
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.FASTAPI_IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push FastAPI image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta-fastapi.outputs.tags }}
          labels: ${{ steps.meta-fastapi.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Extract metadata for Streamlit
        id: meta-streamlit
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.STREAMLIT_IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Streamlit image
        uses: docker/build-push-action@v5
        with:
          context: ./streamlit_app
          push: true
          tags: ${{ steps.meta-streamlit.outputs.tags }}
          labels: ${{ steps.meta-streamlit.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  integration-test:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Update docker-compose for testing
        run: |
          sed -i "s|ghcr.io/werstatyw/fastapi:dev|${{ env.FASTAPI_IMAGE_NAME }}:${{ github.sha }}|g" docker-compose.yaml
          sed -i "s|ghcr.io/werstatyw/streamlit:dev|${{ env.STREAMLIT_IMAGE_NAME }}:${{ github.sha }}|g" docker-compose.yaml

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Run integration tests
        run: |
          docker-compose up -d
          sleep 30
          
          # Test FastAPI health
          curl -f http://localhost:8000/health || exit 1
          
          # Test Streamlit accessibility
          curl -f http://localhost:8501 || exit 1

      - name: Cleanup
        if: always()
        run: |
          docker-compose down
          docker system prune -f

  deploy:
    needs: [test, build-and-push, integration-test]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production

    steps:
      - name: Deploy to production
        run: |
          echo "Deploy to your production environment here"
          echo "FastAPI Image: ${{ env.FASTAPI_IMAGE_NAME }}:latest"
          echo "Streamlit Image: ${{ env.STREAMLIT_IMAGE_NAME }}:latest"