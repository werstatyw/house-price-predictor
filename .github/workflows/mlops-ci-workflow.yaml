name: MLOPS CI Workflow

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ] 
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'development'
        type: choice
        options:
        - development
        - staging
        - production
      run_setup_test:
        description: 'Run Setup and Test'
        required: false
        default: true
        type: boolean
      run_data_preprocessing:
        description: 'Run Data Preprocessing'
        required: false
        default: true
        type: boolean
      run_feature_engineering:
        description: 'Run Feature Engineering'
        required: false
        default: true
        type: boolean
      run_model_training:
        description: 'Run Model Training'
        required: false
        default: true
        type: boolean
      run_build_push:
        description: 'Run Build and Push Images'
        required: false
        default: true
        type: boolean
      model_version:
        description: 'Model version tag'
        required: false
        default: 'latest'
        type: string
  
jobs:
  setup-and-test:
    runs-on: ubuntu-latest
    if: ${{ inputs.run_setup_test }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11.13'
          
      - name: Install pip
        run: |
          python -m pip install --upgrade pip
          
      - name: Install requirements
        run: |
          pip install -r requirements.txt
          
      - name: Run tests (if any)
        run: |
          echo "Running tests..."
          echo "Environment: ${{ inputs.environment }}"
          echo "Model version: ${{ inputs.model_version }}"
          # Add your test commands here if you have tests

  data-preprocessing:
    runs-on: ubuntu-latest
    needs: setup-and-test
    if: ${{ always() && inputs.run_data_preprocessing && (inputs.run_setup_test == false || needs.setup-and-test.result == 'success') }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11.13'
          
      - name: Install pip
        run: |
          python -m pip install --upgrade pip
          
      - name: Install requirements
        run: |
          pip install -r requirements.txt
          
      - name: Run Data Preprocessing
        run: |
          python src/data/run_processing.py \
            --input data/raw/house_data.csv \
            --output data/processed/cleaned_house_data.csv
            
      - name: Upload processed data
        uses: actions/upload-artifact@v4
        with:
          name: processed-data
          path: data/processed/cleaned_house_data.csv

  feature-engineering:
    runs-on: ubuntu-latest
    needs: [setup-and-test, data-preprocessing]
    if: ${{ always() && inputs.run_feature_engineering && (inputs.run_data_preprocessing == false || needs.data-preprocessing.result == 'success') }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11.13'
          
      - name: Install pip
        run: |
          python -m pip install --upgrade pip
          
      - name: Install requirements
        run: |
          pip install -r requirements.txt
          
      - name: Download processed data
        uses: actions/download-artifact@v4
        with:
          name: processed-data
          path: data/processed/
        if: ${{ inputs.run_data_preprocessing }}
          
      - name: Run Feature Engineering
        run: |
          python src/features/engineer.py \
            --input data/processed/cleaned_house_data.csv \
            --output data/processed/featured_house_data.csv \
            --preprocessor models/trained/preprocessor.pkl
            
      - name: Upload featured data
        uses: actions/upload-artifact@v4
        with:
          name: featured-data
          path: |
            data/processed/featured_house_data.csv
            models/trained/preprocessor.pkl

  model-training:
    runs-on: ubuntu-latest
    needs: [setup-and-test, data-preprocessing, feature-engineering]
    if: ${{ always() && inputs.run_model_training && (inputs.run_feature_engineering == false || needs.feature-engineering.result == 'success') }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11.13'
          
      - name: Install pip
        run: |
          python -m pip install --upgrade pip
          
      - name: Install requirements
        run: |
          pip install -r requirements.txt
          
      - name: Download featured data
        uses: actions/download-artifact@v4
        with:
          name: featured-data
          path: .
        if: ${{ inputs.run_feature_engineering }}
          
      - name: Run Model Training
        run: |
          python src/models/train_model.py \
            --config configs/model_config.yaml \
            --data data/processed/featured_house_data.csv \
            --models-dir models \
            --mlflow-tracking-uri http://vm629266.eurodir.ru:5555/
            
      - name: Upload trained models
        uses: actions/upload-artifact@v4
        with:
          name: trained-models
          path: models/

  build-and-push-images:
    runs-on: ubuntu-latest
    needs: [setup-and-test, data-preprocessing, feature-engineering, model-training]
    if: ${{ always() && inputs.run_build_push && (inputs.run_model_training == false || needs.model-training.result == 'success') }}
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download trained models
        uses: actions/download-artifact@v4
        with:
          name: trained-models
          path: models/
        if: ${{ inputs.run_model_training }}

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push FastAPI image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ github.repository }}/fastapi:${{ inputs.model_version }}
            ghcr.io/${{ github.repository }}/fastapi:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Streamlit image
        uses: docker/build-push-action@v5
        with:
          context: ./streamlit_app
          push: true
          tags: |
            ghcr.io/${{ github.repository }}/streamlit:${{ inputs.model_version }}
            ghcr.io/${{ github.repository }}/streamlit:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max